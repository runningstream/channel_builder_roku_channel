<?xml version="1.0" encoding="utf-8" ?> 

<!--********** Copyright 2016 Roku Corp.  All Rights Reserved. **********-->

<component name = "MainScene" extends = "Scene" >

  <interface>
    <field id = "selecteditem" type = "node" />
    <field id = "closescreen" type = "bool" alwaysnotify = "true" value = "false"/>
    <field id = "sess_key" type = "string" value = "" />
  </interface>

  <script type="text/brightscript" >

    <![CDATA[

    sub init()
      'DEBUGGING = true
      DEBUGGING = false
      if DEBUGGING
          URI_API_BASE = "http://192.168.86.11:3031/api/v1/"
          COOKIE_DOMAIN = "192.168.86.11"
      else
          URI_API_BASE = "https://api.runningstream.cc/api/v1/"
          COOKIE_DOMAIN = "api.runningstream.cc"
      end if
      m.global.addFields( {
        COOKIE_DOMAIN: COOKIE_DOMAIN,
        SESSION_COOKIE: "session_ro",
        URI_API_BASE: URI_API_BASE,
        URI_AUTHENTICATE: URI_API_BASE + "authenticate_ro",
        URI_VALIDATE_SESS: URI_API_BASE + "validate_session_ro",
        URI_GET_VID_CONT: URI_API_BASE + "get_channel_xml_ro",
        URI_GET_VID_CONT_JSON: URI_API_BASE + "get_active_channel_ro",
        URI_REFRESH_SESS: URI_API_BASE + "refresh_session_ro",
        REG_SEC: "yourchannel_sessionkey",
        REG_SEC_TOKEN_NAME: "session_key",
        })


      m.top.backgroundURI = "pkg:/images/ChannelSplash_HD.jpg"
      m.top.backgroundcolor = "0xe7e8d1"

      m.videolist = m.top.findNode("videoLabelList")
      m.videoinfo = m.top.findNode("infoLabel")
      m.videoposter = m.top.findNode("videoPoster")
      m.video = m.top.findNode("videoObject")
      m.audio = m.top.findNode("audioObject")
      m.audioControls = m.top.findNode("audioControls")

      m.video.observeField("state","controlvideoplay")
      m.audio.observeField("state","controlaudioplay")
      m.videolist.observeField("itemFocused","setvideo")
      m.videolist.observeField("itemSelected","playvideo")
      m.audioControls.observeField("buttonSelected", "audioControlButton")

      validate_sess_key()
    end sub

    ' Login step 1: Validate the session key
    sub validate_sess_key()
        m.authTask = createObject("RoSGNode", "Authenticator")
        m.authTask.input_sess_key = m.top.sess_key
        m.authTask.observeField("sess_key", "authenticator_returned")
        m.authTask.control = "RUN" 
    end sub

    ' Login step 2: See if the session key validated
    sub authenticator_returned()
        m.top.sess_key = m.authTask.sess_key
        if m.top.sess_key = "INVALID"
            ' Session key failed to validate
            ' Continue login...
            show_app_info()
        else
            ' Login complete!
            readvideolist()
        end if
    end sub

    ' Login step 3: Display program information
    sub show_app_info()
        m.top.signalBeacon("AppDialogInitiate")
        m.app_info = createObject("roSGNode", "AppInfoDialog")
        m.app_info.observeField("selected", "app_info_complete")
        m.top.dialog = m.app_info
    end sub

    ' Login step 4: If the user wants to continue, start to request username
    sub app_info_complete()
        if m.app_info.selected = "Login"
            request_username()
        else
            close_program()
        end if
    end sub

    ' Login step 5: Display the username entry
    sub request_username()
        m.username_entry = createObject("roSGNode", "UsernameEntry")
        m.username_entry.observeField("selected", "username_returned")
        m.top.dialog = m.username_entry
    end sub

    ' Login step 6: If the user didn't cancel, start to request password
    sub username_returned()
        if m.username_entry.selected = "OK"
            request_password()
        else
            close_program()
        end if
    end sub

    ' Login step 7: Display password request
    sub request_password()
        m.password_entry = createObject("roSGNode", "PasswordEntry")
        m.password_entry.observeField("selected", "password_returned")
        m.top.dialog = m.password_entry
    end sub

    ' Login step 8: If the user didn't cancel, start to try to login the user/pass
    sub password_returned()
        if m.password_entry.selected = "OK"
            attempt_userpass_auth()
        else
            close_program()
        end if
    end sub

    ' Login step 9: Try to login user/pass
    sub attempt_userpass_auth()
        m.logger_iner = createObject("RoSGNode", "LoggerIner")
        m.logger_iner.setField("username", m.username_entry.text)
        m.logger_iner.setField("password", m.password_entry.text)
        m.logger_iner.observeField("sess_key", "loger_iner_complete")
        m.logger_iner.control = "RUN"
    end sub

    ' Login step 10: See if the login worked
    sub loger_iner_complete()
        m.top.sess_key = m.logger_iner.sess_key
        if m.top.sess_key = "INVALID"
            ' The login failed, display that fact
            m.invalid_login = createObject("roSGNode", "InvalidLoginDialog")
            m.invalid_login.observeField("selected", "invalid_login_complete")
            m.top.dialog = m.invalid_login
        else
            ' Login succeeded - try the session key once more
            m.top.signalBeacon("AppDialogComplete")
            validate_sess_key()
        end if
    end sub

    ' Login step 11: User knows their login failed, either quit or retry
    sub invalid_login_complete()
        if m.invalid_login.selected = "Login"
            request_username()
        else
            close_program()
        end if
    end sub

    ' After Login: Start reading the video list
    sub readvideolist()
      m.readVideoContentTask = createObject("RoSGNode","VideoContentReader")
      m.readVideoContentTask.observeField("return_error","show_video_content_error")
      m.readVideoContentTask.observeField("videocontent","showvideolist")
      m.readVideoContentTask.setField("sess_key", m.top.sess_key)
      m.readVideoContentTask.control = "RUN" 
    end sub

    ' There was an error retrieving the video content
    sub show_video_content_error()
        ' The login failed, display that fact
        m.video_content_err = createObject("roSGNode", "VideoContentError")
        m.video_content_err .observeField("selected", "video_content_err_complete")
        m.top.dialog = m.video_content_err 
    end sub

    sub video_content_err_complete()
        close_program()
    end sub

    ' Video list ready for display!
    sub showvideolist()
      m.videolist.content = m.readVideoContentTask.videocontent

      m.top.findNode("connectingLabel").visible = false

      m.videolist.setFocus(true)

      m.top.signalBeacon("AppLaunchComplete")

      if m.videolist.content.getChildCount() = 1
          m.videolist.jumpToItem = 0
          playvideo()
      end if
    end sub

    sub setvideo()
      videocontent = m.videolist.content.getChild(m.videolist.itemFocused)
      m.videoposter.uri = videocontent.hdposterurl
      m.videoinfo.text = videocontent.description
      m.top.selecteditem = videocontent
    end sub

    sub playvideo()
      if m.top.selecteditem.contenttype = 4
        ' This is a video item
        m.video.content = m.top.selecteditem
        if m.top.selecteditem.loop
            m.video.loop = true
        end if

        if m.top.selecteditem.lookup("loop") = true
            m.video.loop = true
        end if

        m.video.control = "play"
        m.video.visible = true
        m.video.setFocus(true)
      else if m.top.selecteditem.contenttype = 5
        ' This is an audio item
        audioControlRectangle = m.top.findNode("audioControlRectangle")
        audioControlRectangle.visible = true

        m.audio.content = m.top.selecteditem
        m.audio.control = "play"

        if m.top.selecteditem.lookup("loop") = true
            m.audio.loop = true
        end if

        m.audioControls.setFocus(true)
      else if m.top.selecteditem.contenttype = 2
        ' This is a sublist item
        m.videolist.content = m.top.selecteditem
        m.videolist.setFocus(true)
      else if m.top.selecteditem.contenttype = 0
        ' This is an empty list - or something unsupported

        ' Do nothing
      end if
    end sub

    ' Invoked when an audio control is selected
    sub audioControlButton()
        selected = m.audioControls.buttonSelected
        if selected = 0
            if m.audio.state = "playing"
                m.audio.control = "pause"
            else if m.audio.state = "paused"
                m.audio.control = "resume"
            end if
        else if selected = 1
            m.audio.control = "stop"
            m.audio.control = "play"
        else if selected = 2
            stopAudioPlay()
        end if
    end sub

    sub controlvideoplay()
      if (m.video.state = "finished") 
        m.video.control = "stop"
        m.videolist.setFocus(true)
        m.video.visible = false
      end if
    end sub

    sub controlaudioplay()
        if m.audio.state = "finished" or m.audio.state = "error"
            m.videoinfo.text = "Stopped"
            stopAudioPlay()
        else if m.audio.state = "none"
            m.videoinfo.text = "Stopped"
        else if m.audio.state = "stopped"
            m.videoinfo.text = "Stopped"
        else if m.audio.state = "buffering"
            m.videoinfo.text = "Buffering"
        else if m.audio.state = "playing"
            m.videoinfo.text = "Playing"
        else if m.audio.state = "paused"
            m.videoinfo.text = "Paused"
        else
            m.videoinfo.text = "Error"
        end if
    end sub

    sub stopAudioPlay()
        m.audio.control = "stop"

        selectionControls = m.top.findNode("selectionControls")
        audioControls = m.top.findNode("audioControlRectangle")
        audioControls.visible = false
        selectionControls.visible = true

        m.videolist.setFocus(true)
    end sub

    function onKeyEvent(key as String,press as Boolean) as Boolean
      if press then
        if key = "back"
          if m.video.state = "playing"
            m.video.control = "stop"
            m.videolist.setFocus(true)
            m.video.visible = false

            return true

          else if m.audio.state = "playing" or m.audio.state = "buffering" or m.audio.state = "paused"
            stopAudioPlay()

            return true
          else
            if m.videolist.content.getField("title") = "TopLevelGoNoHigher_FordPrefect"
                close_program()
            end if
            m.videolist.content = m.videolist.content.getParent()

            return true
          end if
        else if key = "options"
            m.options_dlg = createObject("roSGNode", "OptionsDialog")
            m.options_dlg.observeField("selected", "options_dialog_done")
            m.top.dialog = m.options_dlg
        end if
      end if

      return false
    end function

    sub options_dialog_done()
        if m.options_dlg.selected = "Logout"
            m.top.sess_key = "INVALID"

            m.authTask = createObject("RoSGNode", "Authenticator")
            m.authTask.invalidate_request = true
            m.authTask.observeField("sess_key", "close_program")
            m.authTask.control = "RUN" 
        end if
    end sub

    sub close_program()
        ' Quit
        m.top.closescreen = true
    end sub

    ]]>

  </script>

  <children>

    <Group
        id = "selectionControls"
        visible = "true"
    >
        <LabelList 
          id = "videoLabelList"
          itemSize = "[ 350, 60 ]"
          translation = "[ 140, 100 ]"
          color = "0xb85042a0"
          focusedColor = "0xb85042ff"
          />

        <Poster 
          id = "tvPoster"
          translation = "[ 560, 100 ]"
          width = "647"
          height = "620"
          uri = "pkg:/images/flat_scr_area.png" >

          <Poster 
            id = "videoPoster" 
            translation = "[ 52, 45 ]" 
            width = "540" 
            height = "304" />

          <Rectangle
            id = "infoRectangle"
            translation = "[ 52, 460 ]"
            width = "540"
            height = "160"
            color = "0xe7e8d1FF"
            >

            <SimpleLabel
                id = "infoLabel"
                fontUri = "font:LargeBoldSystemFont"
                text = ""
                color = "0xb85042ff"
                horizOrigin = "center"
                vertOrigin = "top"
                translation = "[ 270, 0 ]"
                visible = "true"
            />

          </Rectangle>

        </Poster>
    </Group>

    <Video
      id = "videoObject"
      visible = "false" />

    <Audio
      id = "audioObject" />

    <Rectangle
        id = "audioControlRectangle"
        width = "560"
        height = "720"
        color = "0xe7e8d1ff"
        visible = "false"
    >
        <ButtonGroup
            id = "audioControls"
            buttons = "[&quot;Play/Pause&quot;, &quot;Restart&quot;, &quot;Stop&quot;]"
            translation = "[ 300, 200 ]"
            textFont = "font:LargeBoldSystemFont"
            textColor = "0xb85042a0"
            focusedTextFont = "font:LargeBoldSystemFont"
            focusedtextcolor = "0xb85042ff"
        />
    </Rectangle>

    <SimpleLabel
        id = "connectingLabel"
        fontUri = "font:LargeBoldSystemFont"
        text = "Connecting..."
        color = "0xb85042ff"
        horizOrigin = "center"
        vertOrigin = "center"
        translation = "[640,360]"
        visible = "true"
    />

  </children>

</component>
