<?xml version="1.0" encoding="utf-8" ?> 

<!--********** Copyright 2016 Roku Corp.  All Rights Reserved. **********-->

<component name = "VideoContentReader" extends = "Task" >
 
  <interface>
    <field id = "sess_key" type = "string" value = "" />
    <field id = "videocontent" type = "node" />
  </interface> 

  <script type = "text/brightscript" >
    <![CDATA[

    sub init()
      m.top.functionName = "readcontent"
    end sub

    sub readcontent()

      videocontent = createObject("RoSGNode","ContentNode")
      videocontent.setField("title", "TopLevelGoNoHigher_FordPrefect")
      videocontent.setField("HDPosterUrl", "pkg:/images/NoContent540x304.png")
      videocontent.setField("contenttype", "not set or not supported")

      videocontentxml = createObject("roXMLElement")

      exp = createObject("roDateTime")
      exp.mark()
      exp.fromseconds(exp.asseconds() + 365*24*60*60)
  
      sess_cook = {
          "version": 1,
          "domain": m.global.COOKIE_DOMAIN,
          "path": "/",
          "name": "session",
          "value": m.top.sess_key,
          "expires": exp
          }
      cookies = createObject("roArray", 1, false)
      cookies.setentry(0, sess_cook)

      readInternet = createObject("roUrlTransfer")
      readInternet.SetCertificatesFile("common:/certs/ca-bundle.crt")
      readInternet.AddHeader("X-Roku-Reserved-Dev-Id", "")

      readInternet.EnableCookies()
      retval = readInternet.AddCookies(cookies)
      if retval <> true
          print "ERROR: Cookie add failed!"
      end if

      readInternet.InitClientCertificates()
      readInternet.setUrl(m.global.URI_GET_VID_CONT)
      videocontentxml.parse(readInternet.GetToString())

      if videocontentxml.getName() = "object"
        for each childElem in videocontentxml.getChildElements()
            if childElem.getName() = "entries"
                build_vid_list(videocontent, childElem)
            end if
        end for
      else
          item = videocontent.createChild("ContentNode")
          item.setField("title", "No Content")
          item.setField("HDPosterUrl", "pkg:/images/NoContent540x304.png")
          item.setField("contenttype", "not set or not supported")
      end if


      m.top.videocontent = videocontent
    end sub

    sub build_vid_list(parent_content_node, parent_xml_elem)
      'This function recursively builds a video list as content nodes

      if parent_xml_elem.getChildElements() = invalid then
          item = parent_content_node.createChild("ContentNode")
          item.setField("title", "No Content")
          item.setField("HDPosterUrl", "pkg:/images/NoContent540x304.png")
          item.setField("contenttype", "not set or not supported")
          return
      end if

      for each arrayElem in parent_xml_elem.getChildElements()
        elem = CreateObject("roAssociativeArray")
        for each objectElem in arrayElem.getChildElements()
          for each childElem in objectElem.getChildElements()
            if childElem.getName() <> "entries"
              elem.AddReplace(childElem.getName(), childElem.getText())
            else
              subelem = childElem
            end if
          end for
        end for

        if elem.lookup("type") = "video"
          item = parent_content_node.createChild("ContentNode")
          item.setField("title", elem.lookup("name"))
          item.setField("Url", elem.lookup("videourl"))
          default_image = ""
          if elem.lookup("videotype") = "audio"
              item.setField("StreamFormat", "mp3")
              item.setField("contenttype", "audio")
              default_image = "pkg:/images/SoundPlay540x304.png"
          else
              item.setField("StreamFormat", elem.lookup("videotype"))
              item.setField("contenttype", "episode")
              default_image = "pkg:/images/PlayButton540x304.png"
          end if
          if elem.lookup("image") = ""
              item.setField("HDPosterUrl", default_image)
          else
              item.setField("HDPosterUrl", elem.lookup("image"))
          end if
          item.addField("loop", "boolean", false)
          item.setField("loop", elem.lookup("loop"))
        else if elem.lookup("type") = "sublist"
          item = parent_content_node.createChild("ContentNode")
          item.setField("title", elem.lookup("name"))
          if elem.lookup("image") = ""
              item.setField("HDPosterUrl", "pkg:/images/Folder540x304.png")
          else
              item.setField("HDPosterUrl", elem.lookup("image"))
          end if
          item.setField("contenttype", "series")
          build_vid_list(item, subelem)
        end if

      end for
    end sub

    ]]>
  </script>

</component>
