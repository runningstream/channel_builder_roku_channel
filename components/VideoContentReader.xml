<?xml version="1.0" encoding="utf-8" ?> 

<!--********** Copyright 2016 Roku Corp.  All Rights Reserved. **********-->

<component name = "VideoContentReader" extends = "Task" >
 
  <interface>
    <field id = "sess_key" type = "string" value = "" />
    <field id = "return_error" type = "string" value = "" />
    <field id = "videocontent" type = "node" />
  </interface> 

  <script type = "text/brightscript" >
    <![CDATA[

    sub init()
      m.top.functionName = "readcontent"
    end sub

    sub readcontent()

      videocontent = createObject("RoSGNode","ContentNode")
      videocontent.setField("title", "TopLevelGoNoHigher_FordPrefect")
      videocontent.setField("HDPosterUrl", "pkg:/images/NoContent540x304.png")
      videocontent.setField("contenttype", "not set or not supported")

      exp = createObject("roDateTime")
      exp.mark()
      exp.fromseconds(exp.asseconds() + 365*24*60*60)
  
      sess_cook = {
          "version": 1,
          "domain": m.global.COOKIE_DOMAIN,
          "path": "/",
          "name": m.global.SESSION_COOKIE,
          "value": m.top.sess_key,
          "expires": exp
          }
      cookies = createObject("roArray", 1, false)
      cookies.setentry(0, sess_cook)

      readInternet = createObject("roUrlTransfer")
      readInternet.SetCertificatesFile("common:/certs/ca-bundle.crt")
      readInternet.AddHeader("X-Roku-Reserved-Dev-Id", "")

      readInternet.EnableCookies()
      retval = readInternet.AddCookies(cookies)
      if retval <> true
          print "ERROR: Cookie add failed!"
      end if

      readInternet.InitClientCertificates()
      readInternet.setUrl(m.global.URI_GET_VID_CONT_JSON)

      returned_data = readInternet.GetToString()
      if returned_data = ""
          print "ERROR: No data returned"
          m.top.return_error = "No data returned"
          return
      end if

      videocontentjson = ParseJson(returned_data)
      build_vid_list(videocontent, videocontentjson.entries)
      m.top.videocontent = videocontent
    end sub

    sub build_vid_list(parent_content_node, parent_json_entries)
      'This function recursively builds a video list as content nodes

      if parent_json_entries = invalid or parent_json_entries.count() = 0 then
          item = parent_content_node.createChild("ContentNode")
          item.setField("title", "No Content")
          item.setField("HDPosterUrl", "pkg:/images/NoContent540x304.png")
          item.setField("contenttype", "not set or not supported")
          return
      end if

      for each entry in parent_json_entries
        if entry.Lookup("type") = "video"
          item = parent_content_node.createChild("ContentNode")
          item.setField("title", entry.Lookup("name"))
          item.setField("Url", entry.Lookup("videourl"))
          default_image = ""
          if entry.Lookup("videotype") = "audio"
              item.setField("StreamFormat", "mp3")
              item.setField("contenttype", "audio")
              default_image = "pkg:/images/SoundPlay540x304.png"
          else
              item.setField("StreamFormat", entry.Lookup("videotype"))
              item.setField("contenttype", "episode")
              default_image = "pkg:/images/PlayButton540x304.png"
          end if
          if entry.Lookup("image") = ""
              item.setField("HDPosterUrl", default_image)
          else
              item.setField("HDPosterUrl", entry.Lookup("image"))
          end if
          item.addField("loop", "boolean", false)
          item.setField("loop", entry.Lookup("loop"))
        else if entry.Lookup("type") = "sublist"
          item = parent_content_node.createChild("ContentNode")
          item.setField("title", entry.Lookup("name"))
          if entry.Lookup("image") = ""
              item.setField("HDPosterUrl", "pkg:/images/Folder540x304.png")
          else
              item.setField("HDPosterUrl", entry.Lookup("image"))
          end if
          item.setField("contenttype", "series")
          build_vid_list(item, entry.Lookup("entries"))
        end if
      end for
    end sub

    ]]>
  </script>

</component>
